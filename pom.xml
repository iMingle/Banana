<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.mingle</groupId>
  <artifactId>banana</artifactId>
  <packaging>war</packaging>
  <version>0.0.1-SNAPSHOT</version>
  <name>banana</name>
  <url>http://maven.apache.org</url>
  
  <properties>
      <spring.group>org.springframework</spring.group>
      <spring.version>4.1.7.RELEASE</spring.version>
      <hibernate.group>org.hibernate</hibernate.group>
  </properties>
  
  <dependencies>
  	<!-- Java Standard Tag Library -->
  	<dependency>
		<groupId>javax.servlet.jsp.jstl</groupId>
		<artifactId>jstl-api</artifactId>
		<version>1.2-rev-1</version>
	</dependency>
	<!-- An implementation of the JSP Standard Tag Library -->
	<dependency>
		<groupId>taglibs</groupId>
		<artifactId>standard</artifactId>
		<version>1.1.2</version>
	</dependency>
	<!-- 单元测试 -->
    <dependency>
		<groupId>junit</groupId>
		<artifactId>junit</artifactId>
		<version>4.12</version>
		<scope>test</scope>
	</dependency>
	<!-- Mock objects library for java -->
	<dependency>
		<groupId>org.mockito</groupId>
		<artifactId>mockito-core</artifactId>
		<version>2.0.28-beta</version>
		<scope>test</scope>
	</dependency>
	<!-- Mock objects library for java -->
	<dependency>
	   <groupId>org.mockito</groupId>
	   <artifactId>mockito-all</artifactId>
	   <version>2.0.2-beta</version>
	   <scope>test</scope>
	</dependency>
	<!-- mysql驱动 -->
	<dependency>
		<groupId>mysql</groupId>
		<artifactId>mysql-connector-java</artifactId>
		<version>5.1.34</version>
	</dependency>
	<!-- Simple API for XML -->
	<dependency>
		<groupId>sax</groupId>
		<artifactId>sax</artifactId>
		<version>2.0.1</version>
	</dependency>
	<!-- struts -->
	<dependency>
		<groupId>struts</groupId>
		<artifactId>struts</artifactId>
		<version>1.0.2</version>
	</dependency>
	<!-- A complete, Java-based solution for accessing, manipulating, and outputting XML data -->
	<dependency>
		<groupId>org.jdom</groupId>
		<artifactId>jdom</artifactId>
		<version>2.0.2</version>
	</dependency>
	<!-- Spring Context -->
	<dependency>
		<groupId>${spring.group}</groupId>
		<artifactId>spring-context</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<!-- Spring AOP -->
	<dependency>
		<groupId>${spring.group}</groupId>
		<artifactId>spring-aop</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<!-- Spring Aspects -->
	<dependency>
		<groupId>${spring.group}</groupId>
		<artifactId>spring-aspects</artifactId>
		<version>${spring.version}</version>
    </dependency>
	<!-- Spring JDBC -->
	<dependency>
		<groupId>${spring.group}</groupId>
		<artifactId>spring-jdbc</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<!-- Spring Object/Relational Mapping -->
	<dependency>
		<groupId>${spring.group}</groupId>
		<artifactId>spring-orm</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<!-- Spring test -->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-test</artifactId>
		<version>${spring.version}</version>
    </dependency>
	<!-- Spring Web MVC -->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-webmvc</artifactId>
		<version>${spring.version}</version>
    </dependency>
	<!-- Spring JMS -->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-jms</artifactId>
		<version>${spring.version}</version>
    </dependency>
	<!-- spring-security-core -->
	<dependency>
		<groupId>org.springframework.security</groupId>
		<artifactId>spring-security-core</artifactId>
		<version>4.0.1.RELEASE</version>
	</dependency>
	<!-- spring-security-web -->
	<dependency>
		<groupId>org.springframework.security</groupId>
		<artifactId>spring-security-web</artifactId>
		<version>4.0.1.RELEASE</version>
	</dependency>
	<!-- spring-security-config -->
	<dependency>
		<groupId>org.springframework.security</groupId>
		<artifactId>spring-security-config</artifactId>
		<version>4.0.1.RELEASE</version>
	</dependency>
	<!-- spring-security-taglibs -->
	<dependency>
		<groupId>org.springframework.security</groupId>
		<artifactId>spring-security-taglibs</artifactId>
		<version>4.0.1.RELEASE</version>
	</dependency>
	<!-- spring-security-ldap -->
	<dependency>
		<groupId>org.springframework.security</groupId>
		<artifactId>spring-security-ldap</artifactId>
		<version>4.0.1.RELEASE</version>
	</dependency>
	<!-- Spring Web Flow -->
	<dependency>
		<groupId>org.springframework.webflow</groupId>
		<artifactId>spring-webflow</artifactId>
		<version>2.4.1.RELEASE</version>
	</dependency>
	<!-- Spring Binding -->
	<dependency>
		<groupId>org.springframework.webflow</groupId>
		<artifactId>spring-binding</artifactId>
		<version>2.4.1.RELEASE</version>
	</dependency>
	
    <!-- The core O/RM functionality as provided by Hibernate -->
    <dependency>
		<groupId>${hibernate.group}</groupId>
		<artifactId>hibernate-core</artifactId>
		<version>5.0.0.CR2</version>
	</dependency>
	<!-- Hibernate O/RM implementation of the JPA specification -->
    <dependency>
		<groupId>${hibernate.group}</groupId>
		<artifactId>hibernate-entitymanager</artifactId>
		<version>5.0.0.CR2</version>
	</dependency>
	<!-- Hibernate's Bean Validation (JSR-303) reference implementation -->
    <dependency>
		<groupId>${hibernate.group}</groupId>
		<artifactId>hibernate-validator</artifactId>
		<version>5.2.0.CR1</version>
	</dependency>
	<!-- Annotations metadata for Hibernate -->
    <dependency>
		<groupId>${hibernate.group}</groupId>
		<artifactId>hibernate-annotations</artifactId>
		<version>3.5.6-Final</version>
	</dependency>
    
	<!-- The AspectJ weaver introduces advices to java classes -->
	<dependency>
		<groupId>org.aspectj</groupId>
		<artifactId>aspectjweaver</artifactId>
		<version>1.8.6</version>
	</dependency>
	<!-- The runtime needed to execute a program using AspectJ -->
	<dependency>
		<groupId>org.aspectj</groupId>
		<artifactId>aspectjrt</artifactId>
		<version>1.8.6</version>
	</dependency>
	<!-- Code generation library with shaded ASM dependecies -->
	<dependency>
		<groupId>cglib</groupId>
		<artifactId>cglib-nodep</artifactId>
		<version>3.1</version>
	</dependency>
	<!-- The javax.inject API -->
	<dependency>
		<groupId>javax.inject</groupId>
		<artifactId>javax.inject</artifactId>
		<version>1</version>
	</dependency>
	<!-- Apache Commons DBCP software implements Database Connection Pooling -->
	<dependency>
		<groupId>org.apache.commons</groupId>
		<artifactId>commons-dbcp2</artifactId>
		<version>2.1</version>
	</dependency>
	<!-- Core Jackson abstractions, basic JSON streaming API implementation -->
	<dependency>
		<groupId>com.fasterxml.jackson.core</groupId>
		<artifactId>jackson-core</artifactId>
		<version>2.6.0</version>
	</dependency>
	<!-- Core annotations used for value types, used by Jackson data binding package -->
	<dependency>
		<groupId>com.fasterxml.jackson.core</groupId>
		<artifactId>jackson-annotations</artifactId>
		<version>2.6.0</version>
	</dependency>
	<!-- General data-binding functionality for Jackson: works on core streaming API -->
	<dependency>
		<groupId>com.fasterxml.jackson.core</groupId>
		<artifactId>jackson-databind</artifactId>
		<version>2.6.0</version>
	</dependency>
	<!-- The Apache Log4j Implementation -->
	<dependency>
		<groupId>org.apache.logging.log4j</groupId>
		<artifactId>log4j-core</artifactId>
		<version>2.3</version>
	</dependency>
	<!-- The slf4j API -->
	<dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-api</artifactId>
		<version>1.7.12</version>
	</dependency>
	<!-- SLF4J NOP(no operation) Binding -->
	<dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-nop</artifactId>
		<version>1.7.12</version>
	</dependency>
	<!-- All Roads Lead to ROME. ROME is a set of Atom/RSS Java utilities that make 
	it easy to work in Java with most syndication formats. 
	Today it accepts all flavors of RSS (0.90, 0.91, 0.92, 0.93, 0.94, 1.0 and 2.0), 
	Atom 0.3 and Atom 1.0 feeds. Rome includes a set of parsers and generators for 
	the various flavors of feeds, as well as converters to convert from one format 
	to another. The parsers can give you back Java objects that are either specific 
	for the format you want to work with, or a generic normalized SyndFeed object that 
	lets you work on with the data without bothering about the underlying format. -->
	<dependency>
		<groupId>com.rometools</groupId>
		<artifactId>rome</artifactId>
		<version>1.5.1</version>
	</dependency>
	<!-- Toolkit for Amazon S3, Amazon CloudFront, and Google Storage Service -->
	<dependency>
		<groupId>net.java.dev.jets3t</groupId>
		<artifactId>jets3t</artifactId>
		<version>0.9.3</version>
	</dependency>
	<!-- Java Servlet API -->
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>javax.servlet-api</artifactId>
		<version>3.1.0</version>
	</dependency>
	<!-- The Apache Commons FileUpload component provides a simple yet flexible 
	means of adding support for multipart file upload functionality to servlets and web applications -->
	<dependency>
		<groupId>commons-fileupload</groupId>
		<artifactId>commons-fileupload</artifactId>
		<version>1.3.1</version>
	</dependency>
	<!-- Tiles Core Library, including basic implementation of the APIs -->
	<dependency>
		<groupId>org.apache.tiles</groupId>
		<artifactId>tiles-core</artifactId>
		<version>3.0.5</version>
	</dependency>
	<!-- Tiles JSP support: Classes and tag libraries to use Tiles in a JSP environment -->
	<dependency>
		<groupId>org.apache.tiles</groupId>
		<artifactId>tiles-jsp</artifactId>
		<version>3.0.5</version>
	</dependency>
	<!-- Server's core contains the JNDI provider, interceptors, schema, and database subsystems. 
	The core is the heart of the server without protocols enabled -->
	<dependency>
		<groupId>org.apache.directory.server</groupId>
		<artifactId>apacheds-core</artifactId>
		<version>2.0.0-M20</version>
	</dependency>
	<!-- The JNDI provider which launches the core and associated network services: 
	Changepw, Kerberos, LDAP, and NTP if all are configured. By default only LDAP is configured to startup -->
	<dependency>
		<groupId>org.apache.directory.server</groupId>
		<artifactId>apacheds-server-jndi</artifactId>
		<version>2.0.0-M20</version>
	</dependency>
	<!-- Date and time library to replace JDK date handling -->
	<dependency>
		<groupId>joda-time</groupId>
		<artifactId>joda-time</artifactId>
		<version>2.8.1</version>
	</dependency>
	<!-- A Java Web Filter for any J2EE compliant web application server 
	(such as Resin, Orion or Tomcat), which allows you to rewrite URLs before 
	they get to your code. It is a very powerful tool just like Apache's mod_rewrite -->
	<dependency>
		<groupId>org.tuckey</groupId>
		<artifactId>urlrewritefilter</artifactId>
		<version>4.0.4</version>
	</dependency>
	<!-- Apache Commons Lang, a package of Java utility classes for the classes 
	that are in java.lang's hierarchy, or are considered to be so standard as to 
	justify existence in java.lang -->
	<dependency>
		<groupId>org.apache.commons</groupId>
		<artifactId>commons-lang3</artifactId>
		<version>3.4</version>
	</dependency>
	<!-- Puts together an ActiveMQ jar bundle -->
	<dependency>
		<groupId>org.apache.activemq</groupId>
		<artifactId>activemq-all</artifactId>
		<version>5.11.1</version>
	</dependency>
	
  </dependencies>
  
  <build>
	<finalName>banana</finalName>
  </build>
</project>
